//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `GothamRounded-Bold.otf`.
    static let gothamRoundedBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Bold", pathExtension: "otf")
    /// Resource file `GothamRounded-BoldItalic.otf`.
    static let gothamRoundedBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-BoldItalic", pathExtension: "otf")
    /// Resource file `GothamRounded-Book.otf`.
    static let gothamRoundedBookOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Book", pathExtension: "otf")
    /// Resource file `GothamRounded-BookItalic.otf`.
    static let gothamRoundedBookItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-BookItalic", pathExtension: "otf")
    /// Resource file `GothamRounded-Light.otf`.
    static let gothamRoundedLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Light", pathExtension: "otf")
    /// Resource file `GothamRounded-LightItalic.otf`.
    static let gothamRoundedLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-LightItalic", pathExtension: "otf")
    /// Resource file `GothamRounded-Medium.otf`.
    static let gothamRoundedMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Medium", pathExtension: "otf")
    /// Resource file `GothamRounded-MediumItalic.otf`.
    static let gothamRoundedMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-MediumItalic", pathExtension: "otf")
    
    /// `bundle.url(forResource: "GothamRounded-Bold", withExtension: "otf")`
    static func gothamRoundedBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamRounded-BoldItalic", withExtension: "otf")`
    static func gothamRoundedBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamRounded-Book", withExtension: "otf")`
    static func gothamRoundedBookOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBookOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamRounded-BookItalic", withExtension: "otf")`
    static func gothamRoundedBookItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBookItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamRounded-Light", withExtension: "otf")`
    static func gothamRoundedLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamRounded-LightItalic", withExtension: "otf")`
    static func gothamRoundedLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamRounded-Medium", withExtension: "otf")`
    static func gothamRoundedMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GothamRounded-MediumItalic", withExtension: "otf")`
    static func gothamRoundedMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamRounded-BoldItalic`.
    static let gothamRoundedBoldItalic = Rswift.FontResource(fontName: "GothamRounded-BoldItalic")
    /// Font `GothamRounded-Bold`.
    static let gothamRoundedBold = Rswift.FontResource(fontName: "GothamRounded-Bold")
    /// Font `GothamRounded-BookItalic`.
    static let gothamRoundedBookItalic = Rswift.FontResource(fontName: "GothamRounded-BookItalic")
    /// Font `GothamRounded-Book`.
    static let gothamRoundedBook = Rswift.FontResource(fontName: "GothamRounded-Book")
    /// Font `GothamRounded-LightItalic`.
    static let gothamRoundedLightItalic = Rswift.FontResource(fontName: "GothamRounded-LightItalic")
    /// Font `GothamRounded-Light`.
    static let gothamRoundedLight = Rswift.FontResource(fontName: "GothamRounded-Light")
    /// Font `GothamRounded-MediumItalic`.
    static let gothamRoundedMediumItalic = Rswift.FontResource(fontName: "GothamRounded-MediumItalic")
    /// Font `GothamRounded-Medium`.
    static let gothamRoundedMedium = Rswift.FontResource(fontName: "GothamRounded-Medium")
    
    /// `UIFont(name: "GothamRounded-Bold", size: ...)`
    static func gothamRoundedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBold, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-BoldItalic", size: ...)`
    static func gothamRoundedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBoldItalic, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-Book", size: ...)`
    static func gothamRoundedBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBook, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-BookItalic", size: ...)`
    static func gothamRoundedBookItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBookItalic, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-Light", size: ...)`
    static func gothamRoundedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedLight, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-LightItalic", size: ...)`
    static func gothamRoundedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedLightItalic, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-Medium", size: ...)`
    static func gothamRoundedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedMedium, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-MediumItalic", size: ...)`
    static func gothamRoundedMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedMediumItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.gothamRoundedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Bold' could not be loaded, is 'GothamRounded-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-LightItalic' could not be loaded, is 'GothamRounded-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Book' could not be loaded, is 'GothamRounded-Book.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedBookItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-BookItalic' could not be loaded, is 'GothamRounded-BookItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-BoldItalic' could not be loaded, is 'GothamRounded-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-MediumItalic' could not be loaded, is 'GothamRounded-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Medium' could not be loaded, is 'GothamRounded-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Light' could not be loaded, is 'GothamRounded-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `HomeP`, and contains static references to 1 segues.
    struct homeP {
      /// Segue identifier `HomeV`.
      static let homeV: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeP, HomeV> = Rswift.StoryboardSegueIdentifier(identifier: "HomeV")
      
      /// Optionally returns a typed version of segue `HomeV`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func homeV(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeP, HomeV>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeP.homeV, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomeV`, and contains static references to 2 segues.
    struct homeV {
      /// Segue identifier `LatestPlaceP`.
      static let latestPlaceP: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeV, LatestPlaceP> = Rswift.StoryboardSegueIdentifier(identifier: "LatestPlaceP")
      /// Segue identifier `MostPopularP`.
      static let mostPopularP: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeV, MostPopularP> = Rswift.StoryboardSegueIdentifier(identifier: "MostPopularP")
      
      /// Optionally returns a typed version of segue `LatestPlaceP`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func latestPlaceP(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeV, LatestPlaceP>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeV.latestPlaceP, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MostPopularP`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func mostPopularP(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeV, MostPopularP>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeV.mostPopularP, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LatestPlaceP`, and contains static references to 1 segues.
    struct latestPlaceP {
      /// Segue identifier `LatestPlaceV`.
      static let latestPlaceV: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LatestPlaceP, LatestPlaceV> = Rswift.StoryboardSegueIdentifier(identifier: "LatestPlaceV")
      
      /// Optionally returns a typed version of segue `LatestPlaceV`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func latestPlaceV(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LatestPlaceP, LatestPlaceV>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.latestPlaceP.latestPlaceV, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MostPopularP`, and contains static references to 1 segues.
    struct mostPopularP {
      /// Segue identifier `MostPopularV`.
      static let mostPopularV: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MostPopularP, MostPopularV> = Rswift.StoryboardSegueIdentifier(identifier: "MostPopularV")
      
      /// Optionally returns a typed version of segue `MostPopularV`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func mostPopularV(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MostPopularP, MostPopularV>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mostPopularP.mostPopularV, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `main`.
    static let main = _R.storyboard.main()
    /// Storyboard `places`.
    static let places = _R.storyboard.places()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "places", bundle: ...)`
    static func places(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.places)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// en translation: Home
      /// 
      /// Locales: en
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Most popular
      /// 
      /// Locales: en
      static let mostPopular = Rswift.StringResource(key: "MostPopular", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Home
      /// 
      /// Locales: en
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("Home", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Most popular
      /// 
      /// Locales: en
      static func mostPopular(_: Void = ()) -> String {
        return NSLocalizedString("MostPopular", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try places.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainMVP
      
      let bundle = R.hostingBundle
      let homeP = StoryboardViewControllerResource<HomeP>(identifier: "HomeP")
      let mainMVP = StoryboardViewControllerResource<MainMVP>(identifier: "MainMVP")
      let name = "main"
      
      func homeP(_: Void = ()) -> HomeP? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeP)
      }
      
      func mainMVP(_: Void = ()) -> MainMVP? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainMVP)
      }
      
      static func validate() throws {
        if _R.storyboard.main().homeP() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeP' could not be loaded from storyboard 'main' as 'HomeP'.") }
        if _R.storyboard.main().mainMVP() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainMVP' could not be loaded from storyboard 'main' as 'MainMVP'.") }
      }
      
      fileprivate init() {}
    }
    
    struct places: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let latestPlaceP = StoryboardViewControllerResource<LatestPlaceP>(identifier: "LatestPlaceP")
      let mostPopularP = StoryboardViewControllerResource<MostPopularP>(identifier: "MostPopularP")
      let name = "places"
      
      func latestPlaceP(_: Void = ()) -> LatestPlaceP? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: latestPlaceP)
      }
      
      func mostPopularP(_: Void = ()) -> MostPopularP? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mostPopularP)
      }
      
      static func validate() throws {
        if _R.storyboard.places().latestPlaceP() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'latestPlaceP' could not be loaded from storyboard 'places' as 'LatestPlaceP'.") }
        if _R.storyboard.places().mostPopularP() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mostPopularP' could not be loaded from storyboard 'places' as 'MostPopularP'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
